package db

import (
	"crypto/md5"
	"encoding/hex"
	"fmt"
	"go/format"
	cg "splits-go-schema-codegen/codegen"
	"strings"
	"text/template"
)

// WriteAutogenTests generates the string that tests the autogen code.
func WriteAutogenTests(schemas []cg.Schema, packageName string) string {

	// Use templates to generate the node
	sections := []string{}
	sections = append(sections, GetAutogenTestFileHeaderCommentStr())
	sections = append(sections, GetAutogenTestPackageStr(packageName))
	sections = append(sections, GetAutogenTestImportStr())
	sections = append(sections, GetAutogenNodeTests(schemas))
	sections = append(sections, GetAutogenEdgeTests(schemas))
	result := strings.Join(sections, "\n")
	res, err := format.Source([]byte(result))
	if err != nil {
		fmt.Println(result)
		panic(err)
	}

	// Generate the MD5 signature
	sum := md5.Sum([]byte(res))
	signature := hex.EncodeToString([]byte(sum[:]))

	// Add the signature to the top of the file
	return "// @SignedSource (" + signature + ")\n" + string(res)
}

// GetAutogenTestFileHeaderCommentStr generates an autogenerated tag.
func GetAutogenTestFileHeaderCommentStr() string {
	data := struct {
		Name string
	}{
		Name: "AutogenTests",
	}
	template := "// Autogenerated {{.Name}} - regenerate with splits-go-schema-" +
		"codegen\n// Force autogen by deleting the @SignedSource line.\n"
	return cg.ExecTemplate(template, "autogen_file_header_comment", data, nil)
}

// GetAutogenTestPackageStr generates the package tag.
func GetAutogenTestPackageStr(packageName string) string {
	data := struct {
		Package string
	}{
		Package: packageName,
	}
	template := "package {{.Package}}\n"
	return cg.ExecTemplate(template, "autogen_package", data, nil)
}

// GetAutogenTestImportStr generates the import statements.
func GetAutogenTestImportStr() string {
	data := struct {
		Imports []string
	}{
		Imports: []string{
			"p \"splits-go-api/db/models/predicates\"",
			"\"math/rand\"",
			"\"splits-go-api/testingutil\"",
			"\"testing\"",
		},
	}
	template :=
		"import (\n" +
			"{{range .Imports}} \t{{.}}\n {{end}}" +
			")\n"
	return cg.ExecTemplate(template, "autogen_import", data, nil)
}

// GetAutogenNodeTests generates the tests for the db.
func GetAutogenNodeTests(schemas []cg.Schema) string {
	type usefulSchema struct {
	}
	data := struct {
		Schemas []cg.Schema
	}{
		Schemas: schemas,
	}
	funcMap := template.FuncMap{
		"ToLower": strings.ToLower,
	}
	template := "{{range .Schemas}}" +
		"func Test{{.GetName}}Autogen(t *testing.T) {\n" +
		"\tconn, err := testingutil.GenDBConn()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"can not connect to test neo4j instance\")\n" +
		"\t}\n" +
		"\tif conn != nil {\n" +
		"\t\tdefer conn.Close()\n" +
		"\t}\n" +
		"\terr = testingutil.ClearNeo4j(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"can not clear neo4j graph\")\n" +
		"\t}\n" +
		"\tid := \"{{.GetName | ToLower}}-test-id\"" +
		"\t\n" +
		"\tm1 := {{.GetName}}Mutator(id)" +
		"{{range .GetFields}}.\n\t\tSet{{.CodeName}}({{.DefaultValue}}){{end}}\n" +
		"\t\n" +
		"\tq1 := {{.GetName}}Query()" +
		"{{range .GetFields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.DefaultValue}})){{end}}" +
		"{{range .GetFields}}.\n\t\tReturn{{.CodeName}}(){{end}}\n" +
		"\t\n" +
		"\tm2 := {{.GetName}}Mutator(id)" +
		"{{range .GetFields}}.\n\t\tSet{{.CodeName}}({{.ExampleValue}}){{end}}\n" +
		"\t\n" +
		"\tq2 := {{.GetName}}Query()" +
		"{{range .GetFields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.ExampleValue}})){{end}}" +
		"{{range .GetFields}}.\n\t\tReturn{{.CodeName}}(){{end}}" +
		"{{range .GetFields}}.\n\t\tOrderBy{{.CodeName}}(){{end}}\n" +
		"\t\n" +
		"\td1 := {{.GetName}}Deleter()" +
		"{{range .GetFields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.ExampleValue}})){{end}}.\n\t\tDelete()\n" +
		"\t\n" +
		"\t// Create the node\n" +
		"\t_, stmt, err := m1.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Mutator m1 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the node\n" +
		"\trows, stmt, err := q1.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q1 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err := rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q1 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) == 0 || len(rowList[0]) != {{len .GetFields}} {\n" +
		"\t\tt.Fatal(\"the {{.GetName}}Query q1 did not return \" + \n" +
		"\t\t\t\"the right number of results\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Change the node\n" +
		"\t_, stmt, err = m2.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Mutator m2 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the changed node\n" +
		"\trows, stmt, err = q2.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err = rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) == 0 || len(rowList[0]) != {{len .GetFields}} {\n" +
		"\t\tt.Fatal(\"the {{.GetName}}Query q2 did not return the right \" +" +
		"\n\t\t\t\"number of results after being deleted\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Delete the node\n" +
		"\t_, stmt, err = d1.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Deleter d1 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the node\n" +
		"\trows, stmt, err = q2.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err = rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.GetName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) != 0 {\n" +
		"\t\tt.Fatal(\"the {{.GetName}}Query q2 did not return the right \" +" +
		"\n\t\t\t\"number of results after being deleted\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"}\n" +
		"\n" +
		"{{end}}"
	return cg.ExecTemplate(template, "autogen_node_tests", data, funcMap)
}

// GetAutogenEdgeTests generates the tests for the db.
func GetAutogenEdgeTests(schemas []cg.Schema) string {
	data := struct {
		Schemas []cg.Schema
	}{
		Schemas: schemas,
	}
	funcMap := template.FuncMap{
		"ToLower": strings.ToLower,
	}
	template := "{{range .Schemas}}{{range .GetEdges}}" +
		"func Test{{.CodeName}}Autogen(t *testing.T) {\n" +
		"\tconn, err := testingutil.GenDBConn()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"can not connect to test neo4j instance\")\n" +
		"\t}\n" +
		"\tif conn != nil {\n" +
		"\t\tdefer conn.Close()\n" +
		"\t}\n" +
		"\terr = testingutil.ClearNeo4j(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"can not clear neo4j graph\")\n" +
		"\t}\n" +
		"\tplaceholderID := \"testID\" + string(rand.Int())\n" +
		"\t\n" +
		"\t// Set up the nodes\n" +
		"\tfm := {{.FromNode.GetName}}Mutator(placeholderID)\n" +
		"\ttm := {{.ToNode.GetName}}Mutator(placeholderID)\n" +
		"\t\n" +
		"\t// Edge helpers\n" +
		"\tm1 := {{.CodeName}}Mutator(placeholderID, \"\", \"\")" +
		"{{range .Fields}}.\n\t\tSet{{.CodeName}}({{.DefaultValue}}){{end}}\n" +
		"\t\n" +
		"\tq1 := {{.FromNode.GetName}}Query().\n" +
		"\t\tWhereID(p.Equals(\"\")).\n" +
		"\t\tQuery{{.CodeName}}()" +
		"{{range .Fields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.DefaultValue}})){{end}}" +
		"{{range .Fields}}.\n\t\tReturn{{.CodeName}}(){{end}}" +
		".\n\t\tQuery{{.ToNode.GetName}}().\n\t\tWhereID(p.Equals(\"\"))\n" +
		"\t\n" +
		"\tm2 := {{.CodeName}}Mutator(placeholderID, \"\", \"\")" +
		"{{range .Fields}}.\n\t\tSet{{.CodeName}}({{.ExampleValue}}){{end}}\n" +
		"\t\n" +
		"\tq2 := {{.ToNode.GetName}}Query().\n" +
		"\t\tWhereID(p.Equals(\"\")).\n" +
		"Query{{.CodeName}}()" +
		"{{range .Fields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.ExampleValue}})){{end}}" +
		"{{range .Fields}}.\n\t\tReturn{{.CodeName}}(){{end}}" +
		"{{range .Fields}}.\n\t\tOrderBy{{.CodeName}}(){{end}}.\n" +
		"\t\tQuery{{.FromNode.GetName}}().\n" +
		"\t\tWhereID(p.Equals(\"\"))\n" +
		"\t\n" +
		"\td1 := {{.FromNode.GetName}}Deleter().\n" +
		"\t\tWhereID(p.Equals(\"\")).\n" +
		"\t\tDelete{{.CodeName}}()" +
		"{{range .Fields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.ExampleValue}})){{end}}.\n\t\tDelete().\n" +
		"\t\tDelete{{.ToNode.GetName}}().\n" +
		"\t\tWhereID(p.Equals(\"\"))\n" +
		"\t\n" +
		"\tm3 := {{.CodeName}}Mutator(placeholderID, \"\", \"\")\n" +
		"\t\n" +
		"\td2 := {{.ToNode.GetName}}Deleter().\n" +
		"\t\tWhereID(p.Equals(\"\")).\n" +
		"\t\tDelete{{.CodeName}}()" +
		"{{range .Fields}}.\n\t\tWhere{{.CodeName}}(p.Equals" +
		"({{.ExampleValue}})){{end}}.\n\t\tDelete().\n" +
		"\t\tDelete{{.FromNode.GetName}}().\n" +
		"\t\tWhereID(p.Equals(\"\"))\n" +
		"\t\n" +
		"\t// Create the setup nodes\n" +
		"\t_, stmt, err := fm.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected error when setting up node, \", err)\n" +
		"\t}\n" +
		"\t_, stmt, err = tm.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected error when setting up node, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Create the edge\n" +
		"\t_, stmt, err = m1.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Mutator m1 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the edge\n" +
		"\trows, stmt, err := q1.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q1 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err := rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q1 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) == 0 || len(rowList[0]) != {{len .Fields}} {\n" +
		"\t\tt.Fatal(\"the {{.CodeName}}Query q1 did not return \" + \n" +
		"\t\t\t\"the right number of results\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Change the edge\n" +
		"\t_, stmt, err = m2.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Mutator m2 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the changed edge\n" +
		"\trows, stmt, err = q2.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err = rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) == 0 || len(rowList[0]) != {{len .Fields}} {\n" +
		"\t\tt.Fatal(\"the {{.CodeName}}Query q2 did not return the right \" + \n" +
		"\t\t\t\"number of results after being deleted\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Delete the node\n" +
		"\t_, stmt, err = d1.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Deleter d1 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Query for the node\n" +
		"\trows, stmt, err = q2.Gen(conn)\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\trowList, _, err = rows.All()\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Query q2 error, \", err)\n" +
		"\t}\n" +
		"\tif len(rowList) != 0 {\n" +
		"\t\tt.Fatal(\"the {{.CodeName}}Query q2 did not return the right \" + \n" +
		"\t\t\t\"number of results after being deleted\")\n" +
		"\t}\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Create the edge\n" +
		"\t_, stmt, err = m3.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Mutator m3 error, \", err)\n" +
		"\t}\n" +
		"\t\n" +
		"\t// Delete the edge\n" +
		"\t_, stmt, err = d2.Gen(conn)\n" +
		"\tif stmt != nil {\n" +
		"\t\tstmt.Close()\n" +
		"\t}\n" +
		"\tif err != nil {\n" +
		"\t\tt.Fatal(\"unexpected {{.CodeName}}Deleter d2 error, \", err)\n" +
		"\t}\n" +
		"}\n" +
		"\n" +
		"{{end}}{{end}}"
	return cg.ExecTemplate(template, "autogen_edge_tests", data, funcMap)
}
